FROM openjdk:8-jdk

# Install required packages
RUN apt-get update && apt-get install -y \
    wget \
    unzip \
    curl \
    maven \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /opt/dubbo

# Create a simple vulnerable Dubbo provider
RUN mkdir -p /opt/dubbo/provider/src/main/java/com/example

# Create vulnerable provider class
RUN cat <<EOF > /opt/dubbo/provider/src/main/java/com/example/VulnerableProvider.java
package com.example;

import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.ProtocolConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ServiceConfig;

public class VulnerableProvider {
    public static void main(String[] args) {
        // Configure application
        ApplicationConfig application = new ApplicationConfig();
        application.setName("vulnerable-dubbo-provider");

        // Configure protocol - HTTP protocol is vulnerable
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName("http");
        protocol.setPort(8080);

        // Configure registry
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress("N/A");

        // Configure service
        ServiceConfig<TestService> service = new ServiceConfig<>();
        service.setInterface(TestService.class);
        service.setRef(new TestServiceImpl());
        service.setProtocol(protocol);
        service.setApplication(application);
        service.setRegistry(registry);

        // Export service using older API
        service.export();

        System.out.println("Vulnerable Dubbo provider started on port 8080");
        System.out.println("CVE-2019-17564: Insecure deserialization vulnerability active");

        // Keep the application running
        try {
            Thread.sleep(Long.MAX_VALUE);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
EOF

# Create test service interface
RUN cat <<EOF > /opt/dubbo/provider/src/main/java/com/example/TestService.java
package com.example;

public interface TestService {
    String test(String input);
}
EOF

# Create test service implementation
RUN cat <<EOF > /opt/dubbo/provider/src/main/java/com/example/TestServiceImpl.java
package com.example;

public class TestServiceImpl implements TestService {
    @Override
    public String test(String input) {
        return "Test response: " + input;
    }
}
EOF

# Create pom.xml for Maven build with vulnerable Dubbo version
RUN echo '<?xml version="1.0" encoding="UTF-8"?> \
<project xmlns="http://maven.apache.org/POM/4.0.0" \
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 \
         http://maven.apache.org/xsd/maven-4.0.0.xsd"> \
    <modelVersion>4.0.0</modelVersion> \
 \
    <groupId>com.example</groupId> \
    <artifactId>vulnerable-dubbo-provider</artifactId> \
    <version>1.0.0</version> \
    <packaging>jar</packaging> \
 \
    <properties> \
        <maven.compiler.source>8</maven.compiler.source> \
        <maven.compiler.target>8</maven.compiler.target> \
        <dubbo.version>2.7.3</dubbo.version> \
        <spring.version>4.3.16.RELEASE</spring.version> \
    </properties> \
 \
    <dependencies> \
        <dependency> \
            <groupId>org.apache.dubbo</groupId> \
            <artifactId>dubbo</artifactId> \
            <version>${dubbo.version}</version> \
        </dependency> \
        <dependency> \
            <groupId>org.apache.dubbo</groupId> \
            <artifactId>dubbo-spring-boot-starter</artifactId> \
            <version>${dubbo.version}</version> \
        </dependency> \
        <dependency> \
            <groupId>javax.servlet</groupId> \
            <artifactId>javax.servlet-api</artifactId> \
            <version>3.1.0</version> \
            <scope>provided</scope> \
        </dependency> \
        <dependency> \
            <groupId>org.apache.tomcat.embed</groupId> \
            <artifactId>tomcat-embed-core</artifactId> \
            <version>8.5.54</version> \
        </dependency> \
        <dependency> \
            <groupId>org.apache.tomcat.embed</groupId> \
            <artifactId>tomcat-embed-jasper</artifactId> \
            <version>8.5.54</version> \
        </dependency> \
        <dependency> \
            <groupId>org.springframework</groupId> \
            <artifactId>spring-web</artifactId> \
            <version>${spring.version}</version> \
        </dependency> \
        <dependency> \
            <groupId>org.springframework</groupId> \
            <artifactId>spring-context-support</artifactId> \
            <version>${spring.version}</version> \
        </dependency> \
        <dependency> \
            <groupId>org.eclipse.jetty</groupId> \
            <artifactId>jetty-server</artifactId> \
            <version>9.4.19.v20190610</version> \
        </dependency> \
        <dependency> \
            <groupId>org.eclipse.jetty</groupId> \
            <artifactId>jetty-servlet</artifactId> \
            <version>9.4.19.v20190610</version> \
        </dependency> \
        <dependency> \
            <groupId>org.eclipse.jetty</groupId> \
            <artifactId>jetty-util</artifactId> \
            <version>9.4.19.v20190610</version> \
        </dependency> \
    </dependencies> \
 \
    <build> \
        <plugins> \
            <plugin> \
                <groupId>org.apache.maven.plugins</groupId> \
                <artifactId>maven-compiler-plugin</artifactId> \
                <version>3.8.1</version> \
                <configuration> \
                    <source>8</source> \
                    <target>8</target> \
                </configuration> \
            </plugin> \
            <plugin> \
                <groupId>org.apache.maven.plugins</groupId> \
                <artifactId>maven-shade-plugin</artifactId> \
                <version>3.2.4</version> \
                <executions> \
                    <execution> \
                        <phase>package</phase> \
                        <goals> \
                            <goal>shade</goal> \
                        </goals> \
                        <configuration> \
                            <transformers> \
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"> \
                                    <mainClass>com.example.VulnerableProvider</mainClass> \
                                </transformer> \
                            </transformers> \
                        </configuration> \
                    </execution> \
                </executions> \
            </plugin> \
        </plugins> \
    </build> \
</project>' > /opt/dubbo/provider/pom.xml

# Build the project
WORKDIR /opt/dubbo/provider
RUN mvn clean package -DskipTests

# Expose the vulnerable HTTP port
EXPOSE 8080

# Start the vulnerable provider
CMD ["java", "-jar", "target/vulnerable-dubbo-provider-1.0.0.jar"] 