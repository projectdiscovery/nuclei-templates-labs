# syntax=docker/dockerfile:1.4
FROM node:18-alpine

WORKDIR /app

# Create a new Next.js application
RUN npm init -y && \
    npm install next@14.0.0 react react-dom

# Create necessary directories
RUN mkdir -p pages api

# Create package.json with correct Next.js version
COPY <<EOF /app/package.json
{
  "name": "nextjs-middleware-bypass-test",
  "version": "1.0.0",
  "description": "Vulnerable Next.js app for testing middleware bypass (CVE-2025-29927)",
  "main": "index.js",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "14.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
}
EOF

# Create main page
COPY <<EOF /app/pages/index.js
import Link from 'next/link';

export default function Home() {
  return (
    <div>
      <h1>Next.js Middleware Bypass Test App</h1>
      <p>This is a public page, but the following links are protected by middleware:</p>
      <nav>
        <ul>
          <li><Link href="/dashboard">Dashboard (Protected)</Link></li>
          <li><Link href="/admin">Admin (Protected)</Link></li>
          <li><Link href="/profile">Profile (Protected)</Link></li>
          <li><Link href="/api/secret">API Secret (Protected)</Link></li>
        </ul>
      </nav>
    </div>
  );
}
EOF

# Create unauthorized page
COPY <<EOF /app/pages/unauthorized.js
export default function Unauthorized() {
  return (
    <div>
      <h1>Access Denied</h1>
      <p>You are not authorized to access this page.</p>
      <p>Please login or use appropriate credentials.</p>
    </div>
  );
}
EOF

# Create protected pages
COPY <<EOF /app/pages/dashboard.js
export default function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      <p>This is a protected dashboard page</p>
      <p>If you can see this, either you're authenticated or you've bypassed the middleware!</p>
      <p style={{color: 'red', fontWeight: 'bold'}}>VULNERABILITY CONFIRMED: Middleware bypass successful</p>
    </div>
  );
}
EOF

COPY <<EOF /app/pages/admin.js
export default function Admin() {
  return (
    <div>
      <h1>Admin Panel</h1>
      <p>This is a protected admin page</p>
      <p>If you can see this, either you're authenticated or you've bypassed the middleware!</p>
      <p style={{color: 'red', fontWeight: 'bold'}}>VULNERABILITY CONFIRMED: Middleware bypass successful</p>
    </div>
  );
}
EOF

COPY <<EOF /app/pages/profile.js
export default function Profile() {
  return (
    <div>
      <h1>User Profile</h1>
      <p>This is a protected profile page</p>
      <p>If you can see this, either you're authenticated or you've bypassed the middleware!</p>
      <p style={{color: 'red', fontWeight: 'bold'}}>VULNERABILITY CONFIRMED: Middleware bypass successful</p>
    </div>
  );
}
EOF

# Create protected API endpoint
COPY <<EOF /app/pages/api/secret.js
export default function handler(req, res) {
  res.status(200).json({ 
    message: "This is a protected API endpoint", 
    data: "secret-data-123",
    vulnerabilityStatus: "CONFIRMED: Middleware bypass successful"
  });
}
EOF

# Create improved middleware to protect routes
COPY <<EOF /app/middleware.js
import { NextResponse } from 'next/server';

export function middleware(request) {
  // Protected routes
  const protectedPaths = ['/dashboard', '/admin', '/profile', '/api/secret'];
  const path = request.nextUrl.pathname;

  // Check if the path is protected
  if (protectedPaths.some(prefix => path.startsWith(prefix))) {
    // Standard Next.js middleware redirect behavior
    // This is the default behavior when redirecting users to unauthorized pages
    return NextResponse.redirect(new URL('/unauthorized', request.url));
  }
  
  return NextResponse.next();
}

// Standard Next.js middleware matcher configuration
export const config = {
  matcher: ['/((?!_next/static|_next/image|favicon.ico).*)']
};
EOF

# Expose port and start Next.js
EXPOSE 3000
CMD ["npm", "run", "dev"] 
